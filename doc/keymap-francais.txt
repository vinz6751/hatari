# Keymap. This format allows you to associate SDL key descriptions with
# scancodes simulating the corresponding keys pressed on the emulated ST.
#
# Format is the following:
# <host_description>,<guest_description>
#
# <host_description> is the scancode the key pressed (which you can see
# when running hatari with the "--trace keymap" option. Optionally you can
# add a SDL key modifier. These are described in
# https://wiki.libsdl.org/SDL_Keymod#Related_Functions.
# You can also add a modifier mask. This mask will be bitwise "AND"ed to the
# actual key pressed before it is compared with items from this keymap.
# This allows you make mappings work regardless of the status of other
# modifiers (e.g. NumLock).
# All these (scancode, modifiers, mask) must appear in this order and be
# separated by a pipe |.
#
# <guest_description> is the pipe-separated ordered list of scancodes to send
# to the ST (3 max). For convenience you can use LSHIFT, RSHIFT and
# ALTERNATE in lieu of 2a,36,38 respectively.
# You can find scancodes in many Atari documentation places, e.g.
# https://tho-otto.de/keyboards/
# or https://freemint.github.io/tos.hyp/en/scancode.html
#
# Notes:
# * All scan codes must be in hexadecimal.
# * The parser is not very smart so don't add spaces etc.
# * Make the most demanding specification appear first.

04,1e
# ,
10,32
# ?
10|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|33
10|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|33
# a
14,10
# z
1a,11
# w
1d,2c
# 1
1e|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|02
1e|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|02
1e|KMOD_CAPS|KMOD_CAPS,02
# ~
1f|KMOD_RALT|KMOD_RALT,LSHIFT|ALTERNATE|2b
# #
20|KMOD_RALT|KMOD_RALT,2b
# {
21|KMOD_RALT|KMOD_RALT,2a|ALTERNATE|1a
# [
22|KMOD_RALT|KMOD_RALT,ALTERNATE|1a
# |
23|KMOD_RALT|KMOD_RALT,LSHIFT|2b
# 6
23|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|07
23|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|07
# -
23,0d
# 7
24|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|08
24|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|08
# `
24|KMOD_RALT|KMOD_RALT,29
# 8
25|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|09
25|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|09
# \
25|KMOD_RALT|KMOD_RALT,ALTERNATE|28
# _
25,LSHIFT|0d
# ^
26|KMOD_RALT|KMOD_RALT,1a
# @
27|KMOD_RALT|KMOD_RALT,ALTERNATE|2b
# °
2d|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|0c
2d|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|0c
# ]
2d|KMOD_RALT|KMOD_RALT,ALTERNATE|1b
# + (près de efface)
2e|KMOD_SHIFT|KMOD_SHIFT,RSHIFT|35
# }
2e|KMOD_RALT|KMOD_RALT,LSHIFT|ALTERNATE|1b
# =
2e,35
# ¨
2f|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|1a
2f|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|1a
# ^
2f,1a
# £
30|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|29
30|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|29
# $
30,1b
# µ, ouaip, on peut même émuler les ALT-xyz :)
31|KMOD_LSHIFT|KMOD_LSHIFT,ALTERNATE|6e|6f|70
31|KMOD_RSHIFT|KMOD_RSHIFT,ALTERNATE|6e|6f|70
# * (pas pavé numérique)
31,RSHIFT|1b
# m
33,27
# %
34|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|28
34|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|28
# ù
34,28
# ³ (alt-239)
35|KMOD_LSHIFT|KMOD_LSHIFT,ALTERNATE|6e|6b|6a
35|KMOD_RSHIFT|KMOD_RSHIFT,ALTERNATE|6e|6b|6a
# ² (alt-253)
35,ALTERNATE|6e|6b|6f
# ;
36,33
# . (pas pavé numérique)
36|KMOD_LSHIFT|KMOD_LSHIFT,LSHIFT|33
36|KMOD_RSHIFT|KMOD_RSHIFT,RSHIFT|33
# §
38|KMOD_LSHIFT|KMOD_LSHIFT,07
38|KMOD_RSHIFT|KMOD_RSHIFT,07
